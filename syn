#!/bin/bash

# SYN
#
# Easily synchronise website content (database and asset files) between environments
#
# @version    0.6.2
# @author     Rick Hambrook <rick@rickhambrook.com>
# @copyright  Copyright (c) 2018 Rick Hambrook
# @license    http://opensource.org/licenses/GPL-3.0  GNU Public License


# TODO
# [ ] Docs
# [ ]   - Overview GIF
# [ ]   - Quick start (simplest config)
# [ ]   - RSYNC to separate file
# [ ] "Namespace" everything to a SYN namespace?
# [ ] Use centralised config file for paths and setting, docker/docker-machine (location optionally configurable via env var)
# [ ] Add boot2docker support
# [ ] Add pre-flight validation checks for each plugin
# [ ] Add core validation functions for use by plugins
# [ ]   - ssh connection works (maybe, might cause too many connections)
# [ ]   - docker container exists
# [ ]   - docker container on ssh host is accessible and exists
# [ ] Check all quotes and escape sequences
# [ ] See if there is an easier to way merge defaults with supplied values
# [ ] Maybe load a single location as global config, maybe ~/.syn/config
# [ ] Add shorthand parameters?
# [ ] Enable dumping of sample config from each plugin?




_SYN_VERSION=0.6.2
_SYN_AUTHOR="Rick Hambrook"
_SYN_WEBSITE="https://www.rickhambrook.com"




	##     ##    ###    ########  ####    ###    ########  ##       ########  ######
	##     ##   ## ##   ##     ##  ##    ## ##   ##     ## ##       ##       ##    ##
	##     ##  ##   ##  ##     ##  ##   ##   ##  ##     ## ##       ##       ##
	##     ## ##     ## ########   ##  ##     ## ########  ##       ######    ######
	 ##   ##  ######### ##   ##    ##  ######### ##     ## ##       ##             ##
	  ## ##   ##     ## ##    ##   ##  ##     ## ##     ## ##       ##       ##    ##
	   ###    ##     ## ##     ## #### ##     ## ########  ######## ########  ######


# Initial settings
declare cmd="sync"
declare src
declare dst
declare plugin_cnt
declare config_cnt
declare config_files=""
declare local_root=""
declare autocomplete=false
declare -A actions      # proposed list of actions (honouring --only and --plus)
declare -A actions_all  # key/value list of all actions and their optional flag for the specified environment
declare -A commands
declare -A environments
declare -a plugins      # ordered alphabetically
declare -a plugins_exec # ordered for execution
declare -A exec_order
declare app_dir
declare plugin_dir_builtin
declare plugin_dir_custom
declare default_config_dir
declare colour_enabled=true
declare time_start=`date +"%s"`
declare -A formatting   # must be declared here, not in lib file

# Default settings for plugins to extend
declare -A config

# Flags
declare -A flags=(
	[debug]=false
	[dryrun]=false
	[force]=false
)
declare -A flags_help=(
	#[debug]="Internal use only for now"
	[dryrun]="Show the commands that will be used, but don't run them"
	[force]="Push to live/prod/'warn' without confirmation prompt (if applicable)"
)

# Vars
declare -A vars=(
	[file]=""
	[only]=""
	[plus]=""
	[autocomplete-current]=""
	[autocomplete-previous]=""
)
declare -A vars_help=(
	[file]="Specify a config file to load (after other attempts)"
	[only]="Select only the actions you want to take (comma separated)"
	[plus]="Select actions to take in addition to defaults (comma separated)"
)



	 ######   #######  ##     ## ##     ##    ###    ##    ## ########   ######
	##    ## ##     ## ###   ### ###   ###   ## ##   ###   ## ##     ## ##    ##
	##       ##     ## #### #### #### ####  ##   ##  ####  ## ##     ## ##
	##       ##     ## ## ### ## ## ### ## ##     ## ## ## ## ##     ##  ######
	##       ##     ## ##     ## ##     ## ######### ##  #### ##     ##       ##
	##    ## ##     ## ##     ## ##     ## ##     ## ##   ### ##     ## ##    ##
	 ######   #######  ##     ## ##     ## ##     ## ##    ## ########   ######


# Do the actual synchronising
function syn_cmd_sync() {
	# Check if we have any configs set
	if (( config_cnt == 0 )); then
		syn_error "No config files were found"
	fi

	syn_validate_require_two_envs

	syn_validate_allow

	if ${flags[dryrun]}; then
		printf "$(_ bg_green)\n\tDRY RUN: No actions will be taken, commands will be output instead of run\n$(_ reset)\n\n"
	fi

	# Pre-process summary
	printf "Proceeding to sync %s from $(_ bold)%s$(_ reset) to $(_ bold)%s$(_ reset)\n" "$(printf "${!actions[@]}" | sed -e 's/,/, /')" "$src" "$dst"

	# Check that all the actions exist
	for x in ${!actions[@]}; do
		local p=$(syn_get_plugin_name_from_fuzzy $x)
		if [[ ! $(syn_validate_plugin "$p") ]]; then
			syn_error "Plugin '$p' not found"
		fi
	done

	# Run all the actions exist
	for a in ${!actions[@]}; do
		printf "\n$(_ green bold)Running action: %s$(_ reset)\n" "${actions[$a]}"
		local p=$(syn_get_plugin_name_from_fuzzy $a)
		eval "syn_plugin_${p} \"${actions[$a]}\""
		if [ $? != 0 ]; then
			syn_error "Plugin '$p' encountered an error so processing has stopped"
		fi
	done

	if ! ${flags[dryrun]} || ${flags[debug]}; then
		syn_post_summary
	fi
}


function syn_cmd_actions() {
	local acts=""
	for k in "${!actions[@]}"; do
		acts+="\n  ${k}"
	done
	if [[ ! "${acts}" ]]; then
		acts="\n  <none>"
	fi
	printf "Proposed actions for this sync:${acts}\n"
}
function syn_cmd_actions_help() {
	printf "Show the proposed actions that are configured for a src, dst, or both"
}


function syn_cmd_actions-all() {
	local acts=""
	for k in "${!actions_all[@]}"; do
		acts+="\n  ${actions_all[$k]}${k}"
	done
	if [[ ! "${acts}" ]]; then
		acts="\n  <none>"
	fi
	printf "Proposed actions for this sync:${acts}\n"
}
function syn_cmd_actions-all_help() {
	printf "Show all actions that are configured for a src, dst, or both"
}

# Show environments
function syn_cmd_envs() {
	# $1 = [true/false] show 'readonly' status
	local envs=""
	for e in ${environments[*]}; do
		envs+="  $(_ yellow)${e}$(_ default)"
		if [[ ! "$1" == true && "${config[${e}/_allow]}" == false ]]; then
			envs+=" [read only]"
		fi
		envs+="\n"
	done
	if [[ ! "${envs}" ]]; then
		envs="  <none>\n"
	fi
	syn_cli_render_title "Loaded Environments:"
	printf "${envs}"
}
function syn_cmd_envs_help() {
	printf "List available environments"
}

# Show paths
function syn_cmd_paths() {
	local tmp_plugin_dir_custom
	local tmp_default_config_dir
	if [[ "${SYN_PLUGIN_PATH}" ]]; then
		if [[ -d "${SYN_PLUGIN_PATH}" ]]; then
			tmp_plugin_dir_custom="${SYN_PLUGIN_PATH}"
		else
			tmp_plugin_dir_custom="${SYN_PLUGIN_PATH} (DOES NOT EXIST)"
		fi
	else
		tmp_plugin_dir_custom="<not set>"
	fi
	if [[ "${SYN_DEFAULT_PATH}" ]]; then
		if [[ -d "${SYN_DEFAULT_PATH}" ]]; then
			tmp_default_config_dir="${SYN_DEFAULT_PATH}"
		else
			tmp_default_config_dir="${SYN_DEFAULT_PATH} (DOES NOT EXIST)"
		fi
	else
		tmp_default_config_dir="<not set>"
	fi
	syn_cli_render_title "Custom Paths:"
	syn_cli_render_kv_row "SYN_PLUGIN_PATH:" "${tmp_plugin_dir_custom}" "magenta"
	syn_cli_render_kv_row "SYN_DEFAULT_PATH:" "${tmp_default_config_dir}" "magenta"
}
function syn_cmd_paths_help() {
	printf "List configured paths"
}

# Show plugins
function syn_cmd_plugins() {
	syn_cli_render_title "Loaded Plugins:"
	if (( ${#plugins[@]} > 0 )); then
		printf "  $(_ lightcyan)%s$(_ default)\n" "${plugins[@]}"
	else
		printf "  <none>\n"
	fi
}
function syn_cmd_plugins_help() {
	printf "List all available plugins"
}

# Show configuration files
function syn_cmd_configs() {
	printf "$(_ bold)Loaded Configs:$(_ r_bold)%s\n" "${config_files//"\n"/"\n  "}"
	if [[ "${config_files[@]}" = "" ]]; then
		printf "  <none>"
	fi
}
function syn_cmd_configs_help() {
	printf "List all available configuration files"
}

# Install the thing
function syn_cmd_install() {
	if [[ ! -L "/etc/bash_completion.d/syn" ]]; then
		sudo ln -s "${app_dir}/other/syncomplete.bash" "/etc/bash_completion.d/syn"
		if [[ -L "${BASH_SOURCE[0]}" ]]; then
			printf "Bash completion file added. Try it out!\n"
		fi
	fi
	if [[ -L "${BASH_SOURCE[0]}" ]]; then
		syn_error "Syn is already installed as a SymLink."
	fi
	if [[ -e "/usr/local/bin/syn" ]]; then
		syn_error "Syn is already installed to your path."
	fi
	sudo ln -s "$(readlink -f "$0")" "/usr/local/bin/syn"
	printf "You can now run this script simply by typing 'syn'\n"
}
function syn_cmd_install_help() {
	printf "Installs Syn to your executable path for ease-of-use\n"
}

# Update from Github (because I'm lazy)
function syn_cmd_self-update() {
	if [[ ! -d "${app_dir}/.git" ]]; then
		syn_error "Cannot self update, cannot find .git folder in \"${app_dir}\""
	fi
	local latest_version=$(wget -q -O - https://raw.githubusercontent.com/Hambrook/Syn/master/syn | grep -oP '_SYN_VERSION=([^\n]+)' | sed -e 's/_SYN_VERSION=//')

	printf "Current version: %s\n" $_SYN_VERSION
	printf "Latest version: %s\n" $latest_version

	if ! syn_confirm "Do you wish to update?" "Y"; then
		printf "Aborting\n"
		exit
	fi
	(cd "${app_dir}" && git pull)
	#printf "cd \"${app_dir}\" && git pull\n"
	syn --version
}
function syn_cmd_self-update_help() {
	printf "Updates Syn from the Github repo\n"
}


function syn_cmd_version() {
	printf "Syn v%s\n" "${_SYN_VERSION}"
}
function syn_cmd_version_help() {
	printf "Show the version and exit"
}




	 #######  ######## ##     ## ######## ########      ######  ######## ##     ## ######## ########
	##     ##    ##    ##     ## ##       ##     ##    ##    ##    ##    ##     ## ##       ##
	##     ##    ##    ##     ## ##       ##     ##    ##          ##    ##     ## ##       ##
	##     ##    ##    ######### ######   ########      ######     ##    ##     ## ######   ######
	##     ##    ##    ##     ## ##       ##   ##            ##    ##    ##     ## ##       ##
	##     ##    ##    ##     ## ##       ##    ##     ##    ##    ##    ##     ## ##       ##
	 #######     ##    ##     ## ######## ##     ##     ######     ##     #######  ##       ##


# The banner
function syn_banner() {
	printf "$(_ lightgreen bold)
    _____
   / ____|
  | (___  _   _ _ __     $(_ green r_bold)Version: v%s$(_ lightgreen bold)
   \___ \| | | | '_ \ 
   ____) | |_| | | | |   $(_ green r_bold)Author:  %s$(_ lightgreen bold)
  |_____/ \__, |_| |_|
           __/ |         $(_ green r_bold)Website: %s$(_ lightgreen bold)
          |___/

$(_ reset)" "${_SYN_VERSION}" "${_SYN_AUTHOR}" "${_SYN_WEBSITE}"
}


# Initialise a few paths etc
function syn_init() {
	local real_path="${BASH_SOURCE[0]}"
	if [[ -L "${real_path}" ]]; then
		real_path="$(readlink "${real_path}")"
	fi
	app_dir="$( cd "$( dirname "${real_path}" )" && pwd )"

	plugin_dir_builtin="${app_dir}/plugins"

	if [[ "${SYN_PLUGIN_PATH}" && -d "${SYN_PLUGIN_PATH}" ]]; then
		plugin_dir_custom="${SYN_PLUGIN_PATH}"
	fi

	if [[ "${SYN_DEFAULT_PATH}" && -d "${SYN_DEFAULT_PATH}" ]]; then
		default_config_dir="${SYN_DEFAULT_PATH}"
	fi

	# Load libs
	if [[ -d "$plugin_dir_builtin" ]]; then
		for filename in ${app_dir}/lib/*.bash; do
			. "$filename"
		done
	fi

	# Load plugins
	plugin_cnt=0
	if [[ -d "$plugin_dir_builtin" ]]; then
		for filename in ${plugin_dir_builtin}/*.synPlugin; do
			. "$filename"
			(( plugin_cnt++ ))
		done
	fi
	if [[ -d "$plugin_dir_custom" ]]; then
		for filename in ${plugin_dir_custom}/*.synPlugin; do
			. "$filename"
			(( plugin_cnt++ ))
		done
	fi
}


# Generate and display a post-process summary
function syn_post_summary() {
	local summary_text="${src} > ${dst}"
	if [[ "${vars[file]}" ]]; then
		summary_text="[${vars[file]}] ${summary_text}"
	fi

	# Time reporting
	local time_diff=$(( `date +"%s"` - $time_start ))
	local time_diff_str=""
	if (( time_diff > 3599 )); then
		# hours, minutes, seconds
		time_diff_str=$(date -u -d @"${time_diff}" +'%-Hh %-Mm %-Ss');
	elif (( time_diff > 59 )); then
		# minutes, seconds
		time_diff_str=$(date -u -d @"${time_diff}" +'%-Mm %-Ss');
	else
		# seconds
		time_diff_str=$(date -u -d @"${time_diff}" +'%-Ss');
	fi

	# Only
	local plugins_str="<all>"
	if [[ "${vars[only][$#]}" ]]; then
		plugins_str="${vars[only][@]}"
	fi

	local tmp_configs=${config_files//"\n"/"\n\t\t"}

	# Inline summary
	printf "$(_ bg_green)
	$(_ bold underline)SYN COMPLETE$(_ r_bold r_underline)

	From:    $(_ bold)%s$(_ r_bold) to $(_ bold)%s$(_ r_bold)
	Plugins: %s
	Time:    $(_ bold)%s$(_ r_bold)
	Config files: ${tmp_configs}
$(_ bg_default)
" "${src}" "${dst}" "${plugins_str}" "${time_diff_str}"

	# Popup notification
	if which notify-send >/dev/null; then
		notify-send \
			--category=transfer.complete \
			--icon="${app_dir}/assets/icon.png" \
			"Syn Complete (${time_diff_str})" \
			"${summary_text}"
	fi
}


# Main processing function
function main() {
	# Load and parse everything
	syn_init
	syn_load_configs
	syn_parse_commands
	syn_parse_plugins
	syn_parse_parameters "$@"
	syn_load_config_specific
	syn_parse_environments
	syn_parse_actions
	syn_check_autocomplete_request "$@"
	syn_check_help_request "$@"

	# Do the chosen command
	eval "syn_cmd_${cmd}"

	# Let's get out of here
	exit
}


main "$@"
