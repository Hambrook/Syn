#
# BEFORE plugin for Syn
#
# Execute commands before other actions are taken.
#
# @author     Rick Hambrook <rick@rickhambrook.com>
# @copyright  Copyright (c) 2018 Rick Hambrook
# @license    http://opensource.org/licenses/GPL-3.0  GNU Public License


# Execution order
exec_order[before]=10


# Vars
vars[before-only]=""
vars_help[before-only]="BEFORE: Specify which operations you want to run and ignore others (comma separated)"
# Autocomplete
function syn_var_before-only_autocomplete() {
	syn_helper_beforeafter_only_autocomplete "before" "${1}"
}

vars[before-plus]=""
vars_help[before-plus]="BEFORE: Specify which operations you want to run and ignore others (comma separated)"
# Autocomplete
function syn_var_before-plus_autocomplete() {
	syn_helper_beforeafter_plus_autocomplete "before" "${1}"
}


# Plugin: BEFORE
function syn_plugin_before() {
	syn_helper_beforeafter_run $1 "before" "Before"
}
function syn_plugin_before_help() {
	syn_helper_beforeafter_run_help "before" "BEFORE"
	printf "
CONFIG EXAMPLE

config[live/before/_ssh]=user@prodserver.com
config[live/before/dst]=\"
    maintenance_on=php /path/to/project/bin maintenance_mode:enable
\"
"
}


# Show commands
function syn_cmd_before-list() {
	syn_helper_beforeafter_list "before" "BEFORE"
}
function syn_cmd_before-list_help() {
	printf "Show available commands for src, dst, or all environments"
}


#
# SHARED FUNCTIONS FOR THE BEFORE AND AFTER PLUGINS
#

function syn_helper_beforeafter_run_help() {
	local config_key=$1
	local title=$2


	printf "Run commands on an environment ${config_key} other actions are executed.

Uses a new-line separated list, with key/values separated by '='.

--------------------------------------------------------------------------------

CONFIG

[src]:         [SRC] List of commands when this environment is the source
[dst]:         [DST] List of commands when this environment is the destination
[_ssh]:        SSH string for the server run these commands on

(One of either \"src\" or \"dst\" is required)

--------------------------------------------------------------------------------
"
}


function syn_helper_beforeafter_run() {
	local config_key=$1
	local flag_key=$2
	local case_title=$3

	# Limit to defaults
	local pattern="^\s*(\w*)(=?)(.*)"
	# or limit to parameters
	if [[ ! -z "${vars[${flag_key}-only]}" ]]; then
		pattern="^\s*!?(${vars[${flag_key}-only]/,/|})(=?)(.*)"
	fi
	declare -A loop_envs=( [src]="${src}" [dst]="${dst}" )
	declare -A commands

	for k in "${!loop_envs[@]}"; do
		local env_type="${k}" # src
		local env_key="${loop_envs[$k]}" # staging

		commands=()

		syn_kv_field_to_filtered_kv_array commands "${env_key}/${config_key}/${env_type}" "${vars[${flag_key}-only]}" "${vars[${flag_key}-plus]}"
		for c in "${!commands[@]}"; do
			local cmd_title="${c}"
			local cmd_command="${commands[${c}]}"

			if [[ ! "${cmd_command}" ]]; then
				continue
			fi

			# Should this be sent to a docker container?
			if [[ "${config[${env_key}/${config_key}/_docker]}" ]]; then
				cmd_command=$(syn_docker_wrap "${config[${env_key}/${config_key}/_docker]}" "${cmd_command}")
			fi

			# Should this be over SSH?
			if [[ "${config[${env_key}/${config_key}/_ssh]}" ]]; then
				cmd_command=$(syn_ssh_wrap "${config[${env_key}/${config_key}/_ssh]}" "${cmd_command}")
			fi

			# Finish up
			if ${flags[dryrun]}; then
				printf "[PREVIEW] %s: $(_ bold)%s$(_ r_bold)\n" "${case_title} (${env_type})" "${cmd_title}"
				printf "$(_ lightgray bg_darkgray)\n\t%s\n$(_ reset)\n\n" "${cmd_command}"
			else
				printf "%s: $(_ bold)%s$(_ r_bold)...\n" "${case_title} (${env_type})" "${cmd_title}"
				printf "$(_ lightgray bg_darkgray)\n"
				eval $cmd_command
				local status=$?
				printf "$(_ reset)\n"
				if [ $status != 0 ]; then
					return $status
				fi
				printf "%s: $(_ bold)%s [DONE]\n$(_ r_bold)\n" "${i}"
			fi
		done
	done
}


# Show commands
function syn_helper_beforeafter_list() {
	local config_key=$1
	local title=$2

	printf "${title} commands\n"

	local envs=${environments[*]}
	if [[ "$src" || "$dst" ]]; then
		envs=("$src" "$dst")
	fi

	for e in ${envs[*]}; do
		syn_list_kv_field "${e}:src" "${e}/${config_key}/src"
		syn_list_kv_field "${e}:dst" "${e}/${config_key}/dst"
	done
}


# Autocomplete
function syn_helper_beforeafter_only_autocomplete() {
	local config_key=$1
	syn_autocomplete_kv_field "${src}/${config_key}/src" "${2}"
	syn_autocomplete_kv_field "${dst}/${config_key}/dst" "${2}"
}

function syn_helper_beforeafter_plus_autocomplete() {
	local config_key=$1
	syn_autocomplete_kv_field "${src}/${config_key}/src" "${2}" "!"
	syn_autocomplete_kv_field "${dst}/${config_key}/dst" "${2}" "!"
}
